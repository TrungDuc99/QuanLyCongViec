import { useMemo, useRef, useCallback, useEffect } from 'react';
import lodashDebounce from 'lodash.debounce';

var createCallback = function createCallback(debounce, handleOnScroll, options) {
  if (debounce) {
    return lodashDebounce(handleOnScroll, debounce, options);
  } else {
    return handleOnScroll;
  }
};

function useBottomScrollListener(onBottom, offset, debounce, debounceOptions, triggerOnNoScroll) {
  if (offset === void 0) {
    offset = 0;
  }

  if (debounce === void 0) {
    debounce = 200;
  }

  if (debounceOptions === void 0) {
    debounceOptions = {
      leading: true
    };
  }

  if (triggerOnNoScroll === void 0) {
    triggerOnNoScroll = false;
  }

  var debouncedOnBottom = useMemo(function () {
    return createCallback(debounce, onBottom, debounceOptions);
  }, [debounce, onBottom]);
  var containerRef = useRef(null);
  var handleOnScroll = useCallback(function () {
    if (containerRef.current != null) {
      var scrollNode = containerRef.current;
      var scrollContainerBottomPosition = Math.round(scrollNode.scrollTop + scrollNode.clientHeight);
      var scrollPosition = Math.round(scrollNode.scrollHeight - offset);

      if (scrollPosition <= scrollContainerBottomPosition) {
        debouncedOnBottom();
      }
    } else {
      var _scrollNode = document.scrollingElement || document.documentElement;

      var _scrollContainerBottomPosition = Math.round(_scrollNode.scrollTop + window.innerHeight);

      var _scrollPosition = Math.round(_scrollNode.scrollHeight - offset);

      if (_scrollPosition <= _scrollContainerBottomPosition) {
        debouncedOnBottom();
      }
    }
  }, [offset, onBottom, containerRef.current]);
  useEffect(function () {
    var ref = containerRef.current;

    if (ref != null) {
      ref.addEventListener('scroll', handleOnScroll);
    } else {
      window.addEventListener('scroll', handleOnScroll);
    }

    if (triggerOnNoScroll) {
      handleOnScroll();
    }

    return function () {
      if (ref != null) {
        ref.removeEventListener('scroll', handleOnScroll);
      } else {
        window.removeEventListener('scroll', handleOnScroll);
      }
    };
  }, [handleOnScroll, debounce]);
  return containerRef;
}

var BottomScrollListener = function BottomScrollListener(_ref) {
  var children = _ref.children,
      onBottom = _ref.onBottom,
      offset = _ref.offset,
      debounce = _ref.debounce,
      debounceOptions = _ref.debounceOptions,
      triggerOnNoScroll = _ref.triggerOnNoScroll;
  var optionalScrollContainerRef = useBottomScrollListener(onBottom, offset, debounce, debounceOptions, triggerOnNoScroll);
  if (!children) return null;else if (typeof children === 'function') return children(optionalScrollContainerRef);else return children;
};

export default BottomScrollListener;
export { useBottomScrollListener };
//# sourceMappingURL=index.modern.js.map
